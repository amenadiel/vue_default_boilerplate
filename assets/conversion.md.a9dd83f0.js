import{_ as a,r as o,c as r,b as s,a as e,o as i}from"./app.9b700571.js";const b='{"title":"\u{1F503} Conversion","description":"","frontmatter":{},"headers":[{"level":3,"title":"Supported input formats","slug":"supported-input-formats"},{"level":3,"title":"Output:","slug":"output"},{"level":3,"title":"Filename:","slug":"filename"},{"level":3,"title":"Feature Detection","slug":"feature-detection"}],"relativePath":"conversion.md","lastUpdated":1638768134779}',n={},d=e('<h1 id="\u{1F503}-conversion" tabindex="-1">\u{1F503} Conversion <a class="header-anchor" href="#\u{1F503}-conversion" aria-hidden="true">#</a></h1><h3 id="supported-input-formats" tabindex="-1">Supported input formats <a class="header-anchor" href="#supported-input-formats" aria-hidden="true">#</a></h3><p>As stated elsewhere, Edge-Resizer delegates to <a href="https://images.weserv.nl/" target="_blank" rel="noopener noreferrer"><strong>images.weserv.nl</strong></a>&#39;s API, and because of that, we&#39;re able to read from <a href="https://github.com/weserv/images/issues/105#issuecomment-327497304" target="_blank" rel="noopener noreferrer">quite a few formats</a> including, but not limited to, JPG, PNG, AVIF, GIF, TIFF, PDF, SVG, ICO, WEBP.</p><h3 id="output" tabindex="-1">Output: <a class="header-anchor" href="#output" aria-hidden="true">#</a></h3><p>See also: <a href="https://images.weserv.nl/docs/format.html#output" target="_blank" rel="noopener noreferrer">Output at weserv docs</a></p><p>Using the <code>output</code> parameter it is possible to request the image to be transformed to <code>jpg</code>, <code>png</code>, <code>gif</code>, <code>tiff</code> and <code>webp</code>. When not specified, it defaults to the input format as long as it&#39;s among the former. Other formats that are valid inputs will gracefully fallback to supported output formats (mostly png and jpg tbh)</p>',6),p=e(`<h3 id="filename" tabindex="-1">Filename: <a class="header-anchor" href="#filename" aria-hidden="true">#</a></h3><p>See also: <a href="https://images.weserv.nl/docs/format.html#filename" target="_blank" rel="noopener noreferrer">Filename at weserv docs</a></p><p>The <code>filename</code> parameter affects, for example, the name suggested when you rightclick the image and pick <code>save image as</code>.</p><div class="language-html"><pre><code>https://img.ctohm.com/w=150_output=gif/riff.one/images/designcue-unsplash.jpg
</code></pre></div><table><thead><tr><th>Original (png)</th><th>JPEG</th><th>GIF</th><th>WEBP</th></tr></thead><tbody><tr><td><img src="https://img.ctohm.com/w=150_png/riff.one/images/designcue-unsplash.jpg" alt="original"></td><td><img src="https://img.ctohm.com/hue=90_w=150_jpg/riff.one/images/designcue-unsplash.jpg" alt="jpg"></td><td><img src="https://img.ctohm.com/hue=180_w=150_gif/riff.one/images/designcue-unsplash.jpg" alt="gif"></td><td><img src="https://img.ctohm.com/hue=270_w=150_output=webp/riff.one/images/designcue-unsplash.jpg" alt="webp"></td></tr></tbody></table><h3 id="feature-detection" tabindex="-1">Feature Detection <a class="header-anchor" href="#feature-detection" aria-hidden="true">#</a></h3><p>If you pass <code>auto</code> to the <code>output</code> parameter, we&#39;ll check the <code>accept</code> header of your request to figure out if you&#39;re using a WebP enabled browser or app. If that&#39;s the case, we&#39;ll alter the canonical request as if you explicitly asked for <code>webp</code>. <a href="./caching.html">Caching</a> will take place <em>after</em> this step, as to avoid using the same cache-key for devices with different feature support.</p>`,7);function c(h,l,u,f,m,g){const t=o("output-formats");return i(),r("div",null,[d,s(t,{formats:["jpg","png","gif","webp"],image:"https://riff.one/images/designcue-unsplash.jpg"}),p])}var v=a(n,[["render",c]]);export{b as __pageData,v as default};
