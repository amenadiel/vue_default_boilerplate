import{_ as e,c as a,o as t,a as s}from"./app.9b700571.js";const u='{"title":"\u26F3 Use Cases","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u26F3 Use Cases","slug":"\u26F3-use-cases"},{"level":3,"title":"Stripping the searchParams","slug":"stripping-the-searchparams"}],"relativePath":"use_cases.md","lastUpdated":1638371608481}',r={},n=s('<h2 id="\u26F3-use-cases" tabindex="-1">\u26F3 Use Cases <a class="header-anchor" href="#\u26F3-use-cases" aria-hidden="true">#</a></h2><h3 id="stripping-the-searchparams" tabindex="-1">Stripping the searchParams <a class="header-anchor" href="#stripping-the-searchparams" aria-hidden="true">#</a></h3><p>Story time: this worker was designed to overcome a particular situation for which having clean urls was crucial.</p><p>It turns out I had a mobile app in whose banner Google Play and App Store were promoted, side to side.</p><p><img src="https://img.ctohm.com/_/riff.one/images/banner_lysto.png" alt="banner"></p><p>It turns out this was an unforgivable sin, for which the app was stopped from publishing further updates.</p><p>Technically, I could modify all banners using query string:</p><p><img src="https://img.ctohm.com/_/riff.one/images/banner_lysto.png?ch=250" alt="banner"><code>https://img.ctohm.com/_/riff.one/images/banner_lysto.png?ch=250</code></p><p>But their verification system didn&#39;t take those parameters in consideration. So we implemented our current syntax that encodes the query parameters as part of the pathname. The resulting banner, in the end, was fully compliant</p><p><img src="https://img.ctohm.com/ch=250_cx=20_cw=610_auto_q=0.5/riff.one/images/banner_lysto.png" alt="banner"><code>https://img.ctohm.com/ch=250_cx=80_cw=470_auto_q=0.5/riff.one/images/banner_lysto.png</code></p><p>(hue wasn&#39;t changed. I&#39;m just showing off)</p>',11),i=[n];function o(c,p,h,m,l,d){return t(),a("div",null,i)}var g=e(r,[["render",o]]);export{u as __pageData,g as default};
